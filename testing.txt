Test 1: Help message
==============================================================================

C:\Users\chorton\Documents\GitHub\sequence-aligner>python sequence_aligner.py -h

usage: sequence_aligner.py [-h] [-g] [-v] sequence1 sequence2

sequence-aligner v1.0.0
Finds semi-global alignments between FASTA sequences.

positional arguments:
  sequence1           Reads in the sequence from the given file path if the
                      file exists. Otherwise, treats this as a sequence string
                      to align.
  sequence2           Reads in the sequence from the given file path if the
                      file exists. Otherwise, treats this as a sequence string
                      to align.

optional arguments:
  -h, --help          show this help message and exit
  -g, --global-align  Perform a global alignment instead.
  -v, --view-html     Automatically view HTML5 output in browser.

C:\Users\chorton\Documents\GitHub\sequence-aligner>

Test 2: 2009_segment_7.fasta and 2009_M1_coding_region.fasta
==============================================================================
C:\Users\chorton\Documents\GitHub\sequence-aligner>python sequence_aligner.py test/2009_segment_7.fasta test/2009_M1_coding_region.fasta

(Output too long to copy and paste here...see output1.html attached to this email. The alignment produced is shown below.)
TAGATATTAAAGATGAGTCTTCTAACCGAGGTCGAAACGTACGTTCTTTCTATCATCCCGTCAGGCCCCCTCAAAGCCGAGATCGCGCAGAGACTGGAAAGTGTCTTTGCAGGAAAGAACACAGATCTTGAGGCTCTCATGGAATGGCTAAAGACAAGACCAATCTTGTCACCTCTGACTAAGGGAATTTTAGGATTTGTGTTCACGCTCACCGTGCCCAGTGAGCGAGGACTGCAGCGTAGACGCTTTGTCCAAAATGCCCTAAATGGGAATGGGGACCCGAACAACATGGATAGAGCAGTTAAACTATACAAGAAGCTCAAAAGAGAAATAACGTTCCATGGGGCCAAGGAGGTGTCACTAAGCTATTCAACTGGTGCACTTGCCAGTTGCATGGGCCTCATATACAACAGGATGGGAACAGTGACCACAGAAGCTGCTTTTGGTCTAGTGTGTGCCACTTGTGAACAGATTGCTGATTCACAGCATCGGTCTCACAGACAGATGGCTACTACCACCAATCCACTAATCAGGCATGAAAACAGAATGGTGCTGGCTAGCACTACGGCAAAGGCTATGGAACAGATGGCTGGATCGAGTGAACAGGCAGCGGAGGCCATGGAGGTTGCTAATCAGACTAGGCAGATGGTACATGCAATGAGAACTATTGGGACTCATCCTAGCTCCAGTGCTGGTCTGAAAGATGACCTTCTTGAAAATTTGCAGGCCTACCAGAAGCGAATGGGAGTGCAGATGCAGCGATTCAAGTGATCCTCTCGTCATTGCAGCAAATATCATTGGGATCTTGCACCTGATATTGTGGATTACTGATCGTCTTTTTTTCAAATGTATTTATCGTCGCTTTAAATACGGTTTGAAAAGAGGGCCTTCTACGGAAGGAGTGCCTGAGTCCATGAGGGAAGAATATCAACAGGAACAGCAGAGTGCTGTGGATGTTGACGATGGTCATTTTGTCAACATAGAGCTAGAGTAAAAAACTAC
____________ATGAGTCTTCTAACCGAGGTCGAAACGTACGTTCTTTCTATCATCCCGTCAGGCCCCCTCAAAGCCGAGATCGCGCAGAGACTGGAAAGTGTCTTTGCAGGAAAGAACACAGATCTTGAGGCTCTCATGGAATGGCTAAAGACAAGACCAATCTTGTCACCTCTGACTAAGGGAATTTTAGGATTTGTGTTCACGCTCACCGTGCCCAGTGAGCGAGGACTGCAGCGTAGACGCTTTGTCCAAAATGCCCTAAATGGGAATGGGGACCCGAACAACATGGATAGAGCAGTTAAACTATACAAGAAGCTCAAAAGAGAAATAACGTTCCATGGGGCCAAGGAGGTGTCACTAAGCTATTCAACTGGTGCACTTGCCAGTTGCATGGGCCTCATATACAACAGGATGGGAACAGTGACCACAGAAGCTGCTTTTGGTCTAGTGTGTGCCACTTGTGAACAGATTGCTGATTCACAGCATCGGTCTCACAGACAGATGGCTACTACCACCAATCCACTAATCAGGCATGAAAACAGAATGGTGCTGGCTAGCACTACGGCAAAGGCTATGGAACAGATGGCTGGATCGAGTGAACAGGCAGCGGAGGCCATGGAGGTTGCTAATCAGACTAGGCAGATGGTACATGCAATGAGAACTATTGGGACTCATCCTAGCTCCAGTGCTGGTCTGAAAGATGACCTTCTTGAAAATTTGCAGGCCTACCAGAAGCGAATGGGAGTGCAGATGCAGCGATTCAAGTGA_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Test 3: test1.fasta and test2.fasta
==============================================================================

C:\Users\chorton\Documents\GitHub\sequence-aligner>python sequence_aligner.py te
st/test1.fasta test/test2.fasta
Dynamic programming table:
 |    |   C|   G|   C|   T|   A|   T|   A|   G|
-+----+----+----+----+----+----+----+----+----+
 |    |    |    |    |    |    |    |    |    |
 |   0|<  0|<  0|   0|   0|   0|   0|   0|   0|
-+----+----+----+----+----+----+----+----+----+
 |    |    |    |\   |    |    |    |    |    |
C|   0|   1|   0|   1|   0|   0|   0|   0|   0|
-+----+----+----+----+----+----+----+----+----+
 |    |    |    |    |\   |    |    |    |    |
T|   0|   0|   1|   0|   2|   1|   1|   0|   0|
-+----+----+----+----+----+----+----+----+----+
 |    |    |    |    |    |\   |    |    |    |
A|   0|   0|   0|   1|   1|   3|<  3|<  3|<  3|
-+----+----+----+----+----+----+----+----+----+
Alignment # 1
CGCTATAG
__CTA___
Output written to output.html
Open HTML output in your web browser (y/n)? y

C:\Users\chorton\Documents\GitHub\sequence-aligner>

output.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- saved from url=(0014)about:internet -->
    <meta charset="utf-8">
    <title>output</title>
    <script>
        function arrow(dc,x,y,degrees) {
            dc.beginPath();
            dc.save();
            dc.translate(x,y);
            dc.rotate(-Math.PI * 2 * degrees / 360.0);
            dc.moveTo(0,6);
            dc.lineTo(0,-6);
            dc.lineTo(-4,-6 + 4);
            dc.moveTo(0,-6);
            dc.lineTo(4,-6 + 4);
            dc.stroke();
            dc.restore();
        }
        window.onload = function() {
        var canvas = document.getElementById("drawingCanvas");
        var dc = canvas.getContext("2d");
        dc.font = '10pt Helvetica';
        dc.textAlign = 'center';
dc.beginPath();
dc.moveTo(40,40);
dc.lineTo(40,200);
dc.moveTo(80,40);
dc.lineTo(80,200);
dc.moveTo(120,40);
dc.lineTo(120,200);
dc.moveTo(160,40);
dc.lineTo(160,200);
dc.moveTo(200,40);
dc.lineTo(200,200);
dc.moveTo(240,40);
dc.lineTo(240,200);
dc.moveTo(280,40);
dc.lineTo(280,200);
dc.moveTo(320,40);
dc.lineTo(320,200);
dc.moveTo(360,40);
dc.lineTo(360,200);
dc.moveTo(400,40);
dc.lineTo(400,200);
dc.moveTo(40,40);
dc.lineTo(400,40);
dc.moveTo(40,80);
dc.lineTo(400,80);
dc.moveTo(40,120);
dc.lineTo(400,120);
dc.moveTo(40,160);
dc.lineTo(400,160);
dc.moveTo(40,200);
dc.lineTo(400,200);
dc.stroke();
dc.fillText('C',100,26);
dc.fillText('G',140,26);
dc.fillText('C',180,26);
dc.fillText('T',220,26);
dc.fillText('A',260,26);
dc.fillText('T',300,26);
dc.fillText('A',340,26);
dc.fillText('G',380,26);
dc.fillText('C',20,106);
dc.fillText('T',20,146);
dc.fillText('A',20,186);
dc.fillText('0',60,66);
dc.fillText('0',100,66);
arrow(dc,80,53,90);
dc.fillText('0',140,66);
arrow(dc,120,53,90);
dc.fillText('0',180,66);
dc.fillText('0',220,66);
dc.fillText('0',260,66);
dc.fillText('0',300,66);
dc.fillText('0',340,66);
dc.fillText('0',380,66);
dc.fillText('0',60,106);
dc.fillText('1',100,106);
dc.fillText('0',140,106);
dc.fillText('1',180,106);
arrow(dc,160,80,45);
dc.fillText('0',220,106);
dc.fillText('0',260,106);
dc.fillText('0',300,106);
dc.fillText('0',340,106);
dc.fillText('0',380,106);
dc.fillText('0',60,146);
dc.fillText('0',100,146);
dc.fillText('1',140,146);
dc.fillText('0',180,146);
dc.fillText('2',220,146);
arrow(dc,200,120,45);
dc.fillText('1',260,146);
dc.fillText('1',300,146);
dc.fillText('0',340,146);
dc.fillText('0',380,146);
dc.fillText('0',60,186);
dc.fillText('0',100,186);
dc.fillText('0',140,186);
dc.fillText('1',180,186);
dc.fillText('1',220,186);
dc.fillText('3',260,186);
arrow(dc,240,160,45);
dc.fillText('3',300,186);
arrow(dc,280,173,90);
dc.fillText('3',340,186);
arrow(dc,320,173,90);
dc.fillText('3',380,186);
arrow(dc,360,173,90);
        };
    </script>
</head>
<body>
    <style type="text/css" media="print">
    .printbutton {
      visibility: hidden;
      display: none;
    }
    </style>
    <h1>Semi-Global Alignment</h1>
    <script>
        document.write("<input type='button' " +
        "onClick='window.print()' " +
        "class='printbutton' " +
        "value='Print'/>");
    </script>
    <h2>Dynamic programming table</h2>
  <canvas id="drawingCanvas" width="440" height="240"></canvas>  <h2>Alignment #1</h2>
  <code>CGCTATAG</code><br />
  <code>__CTA___</code><br />
</body>
</html>

Test 4: test3.fasta and test4.fasta
==============================================================================

C:\Users\chorton\Documents\GitHub\sequence-aligner>python sequence_aligner.py te
st/test3.fasta test/test4.fasta
Dynamic programming table:
 |    |   T|   T|   T|   C|   A|   G|   C|   A|   G|   T|   T|   T|
-+----+----+----+----+----+----+----+----+----+----+----+----+----+
 |    |    |    |    |    |    |    |    |    |    |    |    |    |
 |   0|<  0|<  0|<  0|<  0|<  0|<  0|   0|   0|   0|   0|   0|   0|
-+----+----+----+----+----+----+----+----+----+----+----+----+----+
 |    |    |    |    |\   |    |    |\   |    |    |    |    |    |
C|   0|   0|   0|   0|   1|   0|   0|   1|   0|   0|   0|   0|   0|
-+----+----+----+----+----+----+----+----+----+----+----+----+----+
 |    |    |    |    |    |\   |    |    |\   |    |    |    |    |
A|   0|   0|   0|   0|   0|   2|   1|   0|   2|   1|   0|   0|   0|
-+----+----+----+----+----+----+----+----+----+----+----+----+----+
 |    |    |    |    |    |    |\   |    |    |\   |    |    |    |
G|   0|   0|   0|   0|   0|   1|   3|<  3|<  3|<  3|<  3|<  3|<  3|
-+----+----+----+----+----+----+----+----+----+----+----+----+----+
Alignment # 1
TTTCAGCAGTTT
______CAG___
Alignment # 2
TTTCAGCAGTTT
___CAG______
Output written to output.html
Open HTML output in your web browser (y/n)? y

C:\Users\chorton\Documents\GitHub\sequence-aligner>

output.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- saved from url=(0014)about:internet -->
    <meta charset="utf-8">
    <title>output</title>
    <script>
        function arrow(dc,x,y,degrees) {
            dc.beginPath();
            dc.save();
            dc.translate(x,y);
            dc.rotate(-Math.PI * 2 * degrees / 360.0);
            dc.moveTo(0,6);
            dc.lineTo(0,-6);
            dc.lineTo(-4,-6 + 4);
            dc.moveTo(0,-6);
            dc.lineTo(4,-6 + 4);
            dc.stroke();
            dc.restore();
        }
        window.onload = function() {
        var canvas = document.getElementById("drawingCanvas");
        var dc = canvas.getContext("2d");
        dc.font = '10pt Helvetica';
        dc.textAlign = 'center';
dc.beginPath();
dc.moveTo(40,40);
dc.lineTo(40,200);
dc.moveTo(80,40);
dc.lineTo(80,200);
dc.moveTo(120,40);
dc.lineTo(120,200);
dc.moveTo(160,40);
dc.lineTo(160,200);
dc.moveTo(200,40);
dc.lineTo(200,200);
dc.moveTo(240,40);
dc.lineTo(240,200);
dc.moveTo(280,40);
dc.lineTo(280,200);
dc.moveTo(320,40);
dc.lineTo(320,200);
dc.moveTo(360,40);
dc.lineTo(360,200);
dc.moveTo(400,40);
dc.lineTo(400,200);
dc.moveTo(440,40);
dc.lineTo(440,200);
dc.moveTo(480,40);
dc.lineTo(480,200);
dc.moveTo(520,40);
dc.lineTo(520,200);
dc.moveTo(560,40);
dc.lineTo(560,200);
dc.moveTo(40,40);
dc.lineTo(560,40);
dc.moveTo(40,80);
dc.lineTo(560,80);
dc.moveTo(40,120);
dc.lineTo(560,120);
dc.moveTo(40,160);
dc.lineTo(560,160);
dc.moveTo(40,200);
dc.lineTo(560,200);
dc.stroke();
dc.fillText('T',100,26);
dc.fillText('T',140,26);
dc.fillText('T',180,26);
dc.fillText('C',220,26);
dc.fillText('A',260,26);
dc.fillText('G',300,26);
dc.fillText('C',340,26);
dc.fillText('A',380,26);
dc.fillText('G',420,26);
dc.fillText('T',460,26);
dc.fillText('T',500,26);
dc.fillText('T',540,26);
dc.fillText('C',20,106);
dc.fillText('A',20,146);
dc.fillText('G',20,186);
dc.fillText('0',60,66);
dc.fillText('0',100,66);
arrow(dc,80,53,90);
dc.fillText('0',140,66);
arrow(dc,120,53,90);
dc.fillText('0',180,66);
arrow(dc,160,53,90);
dc.fillText('0',220,66);
arrow(dc,200,53,90);
dc.fillText('0',260,66);
arrow(dc,240,53,90);
dc.fillText('0',300,66);
arrow(dc,280,53,90);
dc.fillText('0',340,66);
dc.fillText('0',380,66);
dc.fillText('0',420,66);
dc.fillText('0',460,66);
dc.fillText('0',500,66);
dc.fillText('0',540,66);
dc.fillText('0',60,106);
dc.fillText('0',100,106);
dc.fillText('0',140,106);
dc.fillText('0',180,106);
dc.fillText('1',220,106);
arrow(dc,200,80,45);
dc.fillText('0',260,106);
dc.fillText('0',300,106);
dc.fillText('1',340,106);
arrow(dc,320,80,45);
dc.fillText('0',380,106);
dc.fillText('0',420,106);
dc.fillText('0',460,106);
dc.fillText('0',500,106);
dc.fillText('0',540,106);
dc.fillText('0',60,146);
dc.fillText('0',100,146);
dc.fillText('0',140,146);
dc.fillText('0',180,146);
dc.fillText('0',220,146);
dc.fillText('2',260,146);
arrow(dc,240,120,45);
dc.fillText('1',300,146);
dc.fillText('0',340,146);
dc.fillText('2',380,146);
arrow(dc,360,120,45);
dc.fillText('1',420,146);
dc.fillText('0',460,146);
dc.fillText('0',500,146);
dc.fillText('0',540,146);
dc.fillText('0',60,186);
dc.fillText('0',100,186);
dc.fillText('0',140,186);
dc.fillText('0',180,186);
dc.fillText('0',220,186);
dc.fillText('1',260,186);
dc.fillText('3',300,186);
arrow(dc,280,160,45);
dc.fillText('3',340,186);
arrow(dc,320,173,90);
dc.fillText('3',380,186);
arrow(dc,360,173,90);
dc.fillText('3',420,186);
arrow(dc,400,173,90);
arrow(dc,400,160,45);
dc.fillText('3',460,186);
arrow(dc,440,173,90);
dc.fillText('3',500,186);
arrow(dc,480,173,90);
dc.fillText('3',540,186);
arrow(dc,520,173,90);
        };
    </script>
</head>
<body>
    <style type="text/css" media="print">
    .printbutton {
      visibility: hidden;
      display: none;
    }
    </style>
    <h1>Semi-Global Alignment</h1>
    <script>
        document.write("<input type='button' " +
        "onClick='window.print()' " +
        "class='printbutton' " +
        "value='Print'/>");
    </script>
    <h2>Dynamic programming table</h2>
  <canvas id="drawingCanvas" width="600" height="240"></canvas>  <h2>Alignment #1</h2>
  <code>TTTCAGCAGTTT</code><br />
  <code>______CAG___</code><br />
  <h2>Alignment #2</h2>
  <code>TTTCAGCAGTTT</code><br />
  <code>___CAG______</code><br />
</body>
</html>
